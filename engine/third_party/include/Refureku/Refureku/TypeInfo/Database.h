/**
*	Copyright (c) 2020 Julien SOYSOUVANH - All Rights Reserved
*
*	This file is part of the Refureku library project which is released under the MIT License.
*	See the README.md file for full license details.
*/

#pragma once

#include <string>
#include <unordered_set>
#include <vector>
#include <type_traits>
#include <memory>

#include "Refureku/TypeInfo/Namespaces/Namespace.h"
#include "Refureku/TypeInfo/Archetypes/Class.h"
#include "Refureku/TypeInfo/Archetypes/Enum.h"
#include "Refureku/TypeInfo/Archetypes/FundamentalArchetype.h"
#include "Refureku/Misc/FundamentalTypes.h"

namespace rfk
{
	class Database
	{
		friend class NamespaceFragmentRegisterer;
		friend class ArchetypeRegisterer;
		friend class DefaultEntityRegisterer;

		private:
			using EntitiesById					= std::unordered_set<Entity const*, Entity::PtrIdHasher, Entity::PtrEqualId>;
			using NamespacesByName				= std::unordered_set<Namespace const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using FundamentalArchetypesByName	= std::unordered_set<FundamentalArchetype const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using StructsByName					= std::unordered_set<Struct const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using ClassesByName					= std::unordered_set<Class const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using EnumsByName					= std::unordered_set<Enum const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using VariablesByName				= std::unordered_set<Variable const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using FunctionsByName				= std::unordered_multiset<Function const*, Entity::PtrNameHasher, Entity::PtrEqualName>;
			using GenNamespaces					= std::vector<std::shared_ptr<Namespace>>;

			/** Collection of all registered entities hashed by Id.  */
			static	EntitiesById				_entitiesById;

			/** Collection of all file level namespaces hashed by name. */
			static	NamespacesByName			_fileLevelNamespacesByName;

			/** Collection of all fundamental archetypes hashed by name. */
			static	FundamentalArchetypesByName	_fundamentalArchetypes;

			/** Collection of all file level structs hashed by name. */
			static	StructsByName				_fileLevelStructsByName;

			/** Collection of all file level classes hashed by name. */
			static	ClassesByName				_fileLevelClassesByName;

			/** Collection of all file level enums hashed by name. */
			static	EnumsByName					_fileLevelEnumsByName;

			/** Collection of all file level variables hashed by name. */
			static	VariablesByName				_fileLevelVariablesByName;

			/** Collection of all file level functions hashed by name. */
			static	FunctionsByName				_fileLevelFunctionsByName;

			/** Collection of namespace objects generated by the database. */
			static 	GenNamespaces				_generatedNamespaces;

			/**
			*	@brief Register a file level entity to the database (add it to both _entitiesById & _fileLevelEntitiesByName).
			*	
			*	@param entity						The entity to register.
			*	@param shouldRegisterSubEntities	Should sub entities be registered by id recursively?
			*/
			static void	registerFileLevelEntity(Entity const&	entity,
												bool			shouldRegisterSubEntities)	noexcept;

			/**
			*	@brief Register an entity to the database.
			*	
			*	@param entity						The entity to register.
			*	@param shouldRegisterSubEntities	Should sub entities be registered recursively?
			*/
			static void registerEntity(Entity const&	entity,
									   bool				shouldRegisterSubEntities)			noexcept;

			/**
			*	@brief Unregister an entity from the database.
			*	
			*	@param entity						The entity to unregister.
			*	@param shouldUnregisterSubEntities	Should sub entities be unregistered recursively?
			*/
			static void unregisterEntity(Entity const&	entity,
										 bool			shouldUnregisterSubEntities)		noexcept;

			/**
			*	@brief Add all nested entities to the _entitiesById map.
			*	
			*	@param n The parent namespace.
			*/
			static void registerSubEntities(Namespace const& n)								noexcept;
			
			/**
			*	@brief Add all nested entities to the _entitiesById map.
			*	
			*	@param s The parent struct.
			*/
			static void registerSubEntities(Struct const& s)								noexcept;

			/**
			*	@brief Remove all nested entities from the _entitiesById map.
			*	
			*	@param s The parent struct.
			*/
			static void unregisterSubEntities(Struct const& s)								noexcept;
			
			/**
			*	@brief Add all nested entities to the _entitiesById map.
			*	
			*	@param e The parent enum.
			*/
			static void registerSubEntities(Enum const& e)									noexcept;

			/**
			*	@brief Remove all nested entities from the _entitiesById map.
			*	
			*	@param e The parent enum.
			*/
			static void unregisterSubEntities(Enum const& e)								noexcept;

			/**
			*	@brief	Check that a namespace is still referenced by some namespace fragment.
			*			If not, remove it from the database.
			*
			*	@param npPtr Pointer to the namespace to check.
			*/
			static void	checkNamespaceRefCount(std::shared_ptr<Namespace> const& npPtr)		noexcept;

			/**
			*	@brief Generate a namespace object to share between different namespace fragments.
			*	
			*	@param name Name of the namespace to generate.
			*	@param id Id of the namespace to generate.
			*
			*	@return The newly generated namespace.
			*/
			static std::shared_ptr<Namespace> generateNamespace(char const* name,
																uint64		id)				noexcept;

		public:
			Database()					= delete;
			Database(Database const&)	= delete;
			Database(Database&&)		= delete;
			~Database()					= delete;

			/**
			*	@brief Retrieve any entity of the program matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching entity.
			*	
			*	@return The first matching entity if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Entity const*>>>
			static Entity const*						getEntity(Predicate predicate);

			/**
			*	@brief Retrieve an entity by id.
			*
			*	@param id The id of the entity.
			*
			*	@return A constant pointer to the queried entity if it exists, else nullptr.
			*/
			static Entity const*						getEntity(uint64 id)											noexcept;

			/**
			*	@brief Retrieve a file level namespace matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching namespace.
			*	
			*	@return The first matching namespace if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Namespace const*>>>
			static Namespace const*						getNamespace(Predicate predicate);

			/**
			*	@brief	Retrieve a namespace by name.
			*			Can search nested namespaces directly using :: separator.
			*			Example: getNamespace("namespace1::namespace2") will get the namespace2 nested inside namespace1 if it exists.
			*
			*	@param namespaceName The name of the namespace.
			*
			*	@return A constant pointer to the queried namespace if it exists, else nullptr.
			*
			*	@exception BadNamespaceFormat if the provided namespace name has : instead of :: as a separator, or ends with :.
			*/
			static Namespace const*						getNamespace(std::string namespaceName);

			/**
			*	@brief Retrieve a file level archetype matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching archetype.
			*	
			*	@return The first matching archetype if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Archetype const*>>>
			static Archetype const*						getArchetype(Predicate predicate);

			/**
			*	@brief	Retrieve a file level archetype by name.
			*			This method costs heavier performance as it will basically call getClass, getStruct, getEnum and then getFundamentalArchetype to find
			*			the queried archetype.
			*	
			*	@param archetypeName Name of the archetype.
			*
			*	@return A constant pointer to the queried archetype if it exists, else nullptr.
			*/
			static Archetype const*						getArchetype(std::string archetypeName)							noexcept;

			/**
			*	@brief Retrieve a file level struct matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching struct.
			*	
			*	@return The first matching struct if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Struct const*>>>
			static Struct const*						getStruct(Predicate predicate);

			/**
			*	@brief Retrieve a file level struct by name.
			*
			*	@param structName The name of the struct.
			*
			*	@return A constant pointer to the queried struct if it exists, else nullptr.
			*/
			static Struct const*						getStruct(std::string structName)								noexcept;

			/**
			*	@brief Retrieve a file level class matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching class.
			*	
			*	@return The first matching class if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Class const*>>>
			static Class const*							getClass(Predicate predicate);

			/**
			*	@brief Retrieve a file level class by name.
			*
			*	@param className The name of the class.
			*
			*	@return A constant pointer to the queried class if it exists, else nullptr.
			*/
			static Class const*							getClass(std::string className)									noexcept;

			/**
			*	@brief Retrieve a file level enum matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching enum.
			*	
			*	@return The first matching enum if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Enum const*>>>
			static Enum const*							getEnum(Predicate predicate);

			/**
			*	@brief Retrieve a file level enum by name.
			*
			*	@param enumName The name of the enum.
			*
			*	@return A constant pointer to the queried enum if it exists, else nullptr.
			*/
			static Enum const*							getEnum(std::string enumName)									noexcept;

			/**
			*	@brief Retrieve a fundamental archetype matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching fundamental archetype.
			*	
			*	@return The first matching fundamental archetype if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, FundamentalArchetype const*>>>
			static FundamentalArchetype const*			getFundamentalArchetype(Predicate predicate);

			/**
			*	@brief Retrieve a fundamental archetype by name.
			*
			*	@param archetypeName The name of the fundamental archetype.
			*
			*	@return A constant pointer to the queried fundamental archetype if it exists, else nullptr.
			*/
			static FundamentalArchetype const*			getFundamentalArchetype(std::string archetypeName)				noexcept;

			/**
			*	@brief Retrieve a file level variable matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching variable.
			*	
			*	@return The first matching variable if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Variable const*>>>
			static Variable const*						getVariable(Predicate predicate);

			/**
			*	@brief Retrieve a file level (non-member) variable by name.
			*	
			*	@param variableName The name of the variable.
			*	@param flags		Flags describing the queried variable.
			*						The result variable will have at least the provided flags.
			*	
			*	@return A constant pointer to the queried variable if it exists, else nullptr.
			*/
			static Variable const*						getVariable(std::string variableName,
																	EVarFlags	flags = EVarFlags::Default)				noexcept;

			/**
			*	@brief Retrieve a file level function matching with a given predicate.
			*	
			*	@param predicate Predicate returning true for any matching function.
			*	
			*	@return The first matching function if any is found, else nullptr.
			*/
			template <typename Predicate, typename = std::enable_if_t<std::is_invocable_r_v<bool, Predicate, Function const*>>>
			static Function const*						getFunction(Predicate predicate);

			/**
			*	@brief Retrieve a file level (non-member) function by name and signature.
			*	
			*	@tparam FunctionSignature Signature of the function to look for.
			*
			*	@param functionName The name of the function.
			*	@param flags		Flags describing the queried function.
			*						The result function will have at least the provided flags.
			*	
			*	@return A constant pointer to the function matching the signature, name and flags if it exists, else nullptr.
			*/
			template <typename FunctionSignature>
			static Function const*						getFunction(std::string		functionName,
																	EFunctionFlags	flags = EFunctionFlags::Default)	noexcept;

			/**
			*	@brief Retrieve a file level (non-member) function by name.
			*	
			*	@param functionName The name of the function.
			*	@param flags		Flags describing the queried function.
			*						The result function will have at least the provided flags.
			*	
			*	@return A constant pointer to the first function matching the name and flags if it exists, else nullptr.
			*/
			static Function const*						getFunction(std::string		functionName,
																	EFunctionFlags	flags = EFunctionFlags::Default)	noexcept;

			/**
			*	@brief Clear the whole database of any registered entity
			*/
			static void									clear()															noexcept;

			/**
			*	@brief Getter for _entitiesById.
			*
			*	@return _entitiesById.
			*/
			static EntitiesById const&					getEntitiesById()												noexcept;

			/**
			*	@brief Getter for _fileLevelNamespacesByName.
			*
			*	@return _fileLevelNamespacesByName.
			*/
			static NamespacesByName const&				getFileLevelNamespaces()										noexcept;

			/**
			*	@brief Getter for _fundamentalArchetypes.
			*
			*	@return _fundamentalArchetypes.
			*/
			static FundamentalArchetypesByName const&	getFundamentalArchetypes()										noexcept;

			/**
			*	@brief Getter for _fileLevelStructsByName.
			*
			*	@return _fileLevelStructsByName.
			*/
			static StructsByName const&					getFileLevelStructs()											noexcept;

			/**
			*	@brief Getter for _fileLevelClassesByName.
			*
			*	@return _fileLevelClassesByName.
			*/
			static ClassesByName const&					getFileLevelClasses()											noexcept;

			/**
			*	@brief Getter for _fileLevelEnumsByName.
			*
			*	@return _fileLevelEnumsByName.
			*/
			static EnumsByName const&					getFileLevelEnums()												noexcept;

			/**
			*	@brief Getter for _fileLevelVariablesByName.
			*
			*	@return _fileLevelVariablesByName.
			*/
			static VariablesByName const&				getFileLevelVariables()											noexcept;

			/**
			*	@brief Getter for _fileLevelFunctionsByName.
			*
			*	@return _fileLevelFunctionsByName.
			*/
			static FunctionsByName const&				getFileLevelFunctions()											noexcept;
	};

	#include "Refureku/TypeInfo/Database.inl"
}